/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define RAISE 1
#define LOWER 2
#define	ADJUST 3
#define EXCEL 4
#define SLIP 5

&mt {
	tapping-term-ms = <200>;
};

/ {
	behaviors {
		td_mtls: tap_dance_triple_brackets_left {
			compatible = "zmk,behavior-tap-dance";
			label = "tap_dance_triple_brackets_left";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LPAR>, <&kp LBKT>, <&kp LBRC>;
		};
		
		td_mtrs: tap_dance_triple_brackets_right {
			compatible = "zmk,behavior-tap-dance";
			label = "tap_dance_triple_brackets_right";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp RPAR>, <&kp RBKT>, <&kp RBRC>;
		};
		
		td_minund: tap_dance_minus_underscore {
			compatible = "zmk,behavior-tap-dance";
			label = "tap_dance_minus_underscore";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp MINUS>, <&kp UNDER>;
		};

		pht: positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <13>;
		};
	};

	macros {
		slippw: slippw {
			label = "SLIPPW";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <5>;
			tap-ms = <5>;
			bindings
				= <&macro_tap &kp D &kp Y &kp W &kp LS(T) &kp M &kp L &kp M &kp LS(F)>
				; 
		};

		msdunm: msdunm {
			label = "MSDUSERNAME";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <5>;
			tap-ms = <5>;
			bindings
				= <&macro_tap &kp R &kp B &kp R &kp O &kp W &kp N0 &kp N4 &kp N6 &kp TAB>
				; 
		};

		pwcunm: pwcu {
			label = "PWCUSERNAME";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <5>;
			tap-ms = <5>;
			bindings
				= <&macro_tap &kp R &kp Y &kp A &kp N &kp DOT &kp S &kp DOT &kp B &kp R &kp O &kp W &kp N &kp AT &kp P &kp W &kp C &kp DOT &kp C &kp O &kp M>
				; 
		};
	};

	combos {
		compatible = "zmk,combos";
			combo_leftbrackets {
			timeout-ms = <20>;
			key-positions = <13 14>;
			bindings = <&td_mtls>;
		};

			combo_rightbrackets {
			timeout-ms = <20>;
			key-positions = <21 22>;
			bindings = <&td_mtrs>;
		};

			combo_excellayer {
			timeout-ms = <20>;
			key-positions = <14 15>;
			bindings = <&mo EXCEL>;
		};	

			combo_sliplayer {
			timeout-ms = <20>;
			key-positions = <19 21>;
			layers = <4>;
			bindings = <&mo SLIP>;
		};	

			combo_LGUI {
			timeout-ms = <20>;
			key-positions = <48 49>;
			bindings = <&kp LGUI>;
		};	
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
				&kp TAB &kp Q &kp W &kp E &pht LC(R) R &pht LC(T) T                                                &pht LC(Y) Y &pht LC(U) U  &pht LC(I) I     &pht LC(O) O   &pht LC(P) P    &kp ESC
				&caps_word &pht LC(A) A &pht LC(S) S &pht LC(D) D &pht LC(F) F &kp G         								&kp H &kp J &kp K     &pht LC(L) L   &kp 	SEMI &kp SQT
				&kp LSHFT &pht LC(Z) Z &pht LC(X) X &pht LC(C) C &pht LC(V) V &pht LC(B) B &kp BSPC &kp LC(LA(DEL))        &kp PLUS &kp EQUAL &pht LC(N) N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
	      					&kp LG(L) &kp LALT &mo LOWER &kp LC(BSPC) &kp LCTRL        &kp ENTER &kp SPACE &mo RAISE &kp LC(PG_UP) &kp LC(PG_DN)
			>;

		};
		
		RAISE_layer {
			bindings = <
				&trans &trans &trans &trans &trans &trans                              &kp PG_UP &kp N7 &kp N8 &kp N9 &kp N0 &trans
				&trans &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                             &kp HOME &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp END
				&trans &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans &trans                       &trans &trans &trans &td_minund &kp N2 &kp N3 &kp EQUAL &trans
				            &trans  &trans   &mo ADJUST        &trans &trans                       &trans &trans    &trans    &kp HOME     &kp END
			>;

		};

		LOWER_layer {
			bindings = <
				&trans &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT                              &kp CARET &kp AMPS &kp ASTRK &trans &trans &trans
				&kp DEL &kp F2 &kp F4 &kp F5 &kp F12 &trans                             &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &kp PG_DN &kp PG_UP &trans &trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans
	           				&trans  &trans   &trans        &trans &trans  &trans &trans    &mo ADJUST    &trans    &trans
			>;

		};

		ADJUST_layer {
			bindings = <
				&out OUT_TOG &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_NXT &bt BT_CLR                              &kp PG_UP &kp N7 &kp N8 &kp N9 &kp N0 &trans
				&trans &kp N1 &kp N2 &kp N3 &kp N4 &kp Q                             &kp LC(LS(LEFT)) &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp LC(LS(RIGHT))
				&trans &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans &trans                       &trans &trans &trans &kp MINUS &kp N2 &kp N3 &kp EQUAL &trans
				            &trans  &trans   &trans        &kp LGUI &trans                       &trans &trans    &trans    &kp HOME     &kp END
			>;
		};

		EXCEL_layer {
			bindings = <
				&trans &trans &trans &trans &trans &trans                              &kp TAB &kp N7 &kp N8 &kp N9 &kp ASTRK &kp ESC
				&trans &trans &trans &trans &trans &trans                             &kp PLUS &kp N4 &kp N5 &kp N6 &kp DOT &kp SQT
				&kp LPAR &trans &trans &trans &trans &trans &trans &trans                       &trans &trans &kp MINUS &kp N1 &kp N2 &kp N3 &kp FSLH &kp RPAR
				            &trans  &trans   &trans        &trans &trans                       &kp ENTER &kp SPACE    &kp N0    &kp EQUAL     &trans
			>;
		};

		SLIP_layer {
			bindings = <
				&trans &trans &trans &trans &trans &trans                              &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans                             &trans &trans &trans &trans &trans &trans
				&trans &trans &trans &trans &trans &trans &trans &trans                       &trans &trans &trans &trans &trans &trans &trans &trans
				            &trans  &trans   &trans        &trans &trans                       &msdunm &slippw    &pwcunm    &trans     &trans
			>;
		};
	};
};
