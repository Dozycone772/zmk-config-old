/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define RAISE 1
#define LOWER 2

/ {
	behaviors {										
		lh_pht: left_hand_positional_hold_tap {		// Sets up the positional hold tap behaviour for home row mods - left hand
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_POSITIONAL_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <100>;
			quick-tap-ms = <200>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 32 33 34 35 36 37 38 39 45 46 47 48 49>; 
		};

		rh_pht: right_hand_positional_hold_tap {	// Sets up the positional hold tap behaviour for home right hand
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_POSITIONAL_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <100>;
			quick-tap-ms = <200>;
			global-quick-tap;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 30 31 40 41 42 43 44>;
		};
	};

	combos {
		compatible = "zmk,combos";
			combo_home {
			timeout-ms = <50>;
			key-positions = <19 20>;
			bindings = <&kp HOME>;
			layers = <1>;
		};
		
			combo_end {
			timeout-ms = <50>;
			key-positions = <21 22>;
			bindings = <&kp END>;
			layers = <1>;
		};

			combo_cut {
			timeout-ms = <50>;
			key-positions = <13 14>;
			bindings = <&kp LC(X)>;
		};

			combo_copy {
			timeout-ms = <50>;
			key-positions = <14 15>;
			bindings = <&kp LC(C)>;
		};
			combo_paste {
			timeout-ms = <50>;
			key-positions = <15 16>;
			bindings = <&kp LC(Vo)>;
		};

	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
				&kp TAB &kp Q &kp W &kp E &kp R &kp T                                                &kp Y &kp U  &kp I     &kp O   &kp P    &kp ESC
				&kp CAPS &lh_pht LGUI A &lh_pht LALT S &lh_pht LCTRL D &lh_pht LSHFT F &kp G         &kp H &rh_pht RSHFT J &rh_pht RCTRL K     &rh_pht RALT L   &rh_pht RGUI SEMI &kp SQT
				&mt LBRC LPAR &kp Z &kp X &kp C &kp V &kp B &kp BSPC &kp LC(LA(DEL))        &kp PLUS &kp EQUAL &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RBRC RPAR
	      					&kp LG(L) &kp LALT &mo LOWER &kp LC(BSPC) &kp LCTRL        &kp ENTER &kp SPACE  &mo RAISE &kp LC(PG_UP) &kp LC(PG_DN)
			>;

		};
		
		RAISE_layer {
			bindings = <
				&out OUT_TOG &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_NXT &bt BT_CLR                              &kp PG_UP &kp N7 &kp N8 &kp N9 &kp N0 &trans
				&trans &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                             &kp LC(LS(LEFT)) &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp LC(LS(RIGHT))
				&trans &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &trans &trans                       &trans &trans &trans &kp MINUS &kp N2 &kp N3 &kp EQUAL &trans
				            &trans  &trans   &trans        &kp LGUI &trans                       &trans &trans    &trans    &kp HOME     &kp END
			>;

		};

		LOWER_layer {
			bindings = <
				&trans &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT                              &kp CARET &kp AMPS &kp ASTRK &trans &trans &trans
				&kp DEL &kp F2 &kp F4 &kp F5 &kp F12 &trans                             &trans &kp UNDER &trans &trans &trans &trans
				&trans &trans &trans &kp PG_DN &kp PG_UP &trans &trans &trans  &trans &trans &trans &trans &trans &trans &trans &trans
	           				&trans  &trans   &trans        &trans &trans  &trans &trans    &trans    &trans    &trans
			>;

		};
	};
};
